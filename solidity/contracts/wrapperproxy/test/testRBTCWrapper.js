const { default: Contract } = require("web3/eth/contract");
var poolTokenABI = [{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_disable","type":"bool"}],"name":"disableTransfers","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"version","outputs":[{"name":"","type":"uint16"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_token","type":"address"},{"name":"_to","type":"address"},{"name":"_amount","type":"uint256"}],"name":"withdrawTokens","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"acceptOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_amount","type":"uint256"}],"name":"issue","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_amount","type":"uint256"}],"name":"destroy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"transfersEnabled","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"newOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"_name","type":"string"},{"name":"_symbol","type":"string"},{"name":"_decimals","type":"uint8"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_amount","type":"uint256"}],"name":"Issuance","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_amount","type":"uint256"}],"name":"Destruction","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":true,"name":"_to","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_owner","type":"address"},{"indexed":true,"name":"_spender","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_prevOwner","type":"address"},{"indexed":true,"name":"_newOwner","type":"address"}],"name":"OwnerUpdate","type":"event"}];
var poolTokenAddress = web3.utils.toChecksumAddress('0x7F433cC76298bb5099C15C1C7c8f2E89A8370111');
var poolToken = new web3.eth.Contract(poolTokenABI, poolTokenAddress);

contract('RBTCWrapperProxy', async (accounts) => {

    it('verifies that users could send RBTC and then add liquidity', async () => {
        console.log('The account address:', accounts[0]);
        console.log('The amount of RBTC of the account:', await web3.eth.getBalance(web3.utils.toChecksumAddress(accounts[0])));
        console.log('The amount of pool token of the account:', await poolToken.methods.balanceOf(accounts[0]).call());
        const rbtcWrapperProxy = await RBTCWrapperProxy.deployed();
        await rbtcWrapperProxy.addLiquidity(web3.utils.toBN(1e16), 1, {from:accounts[0], to:RBTCWrapperProxy.address, value:1e16});
        console.log('The amount of RBTC of the account after sending 0.01 RBTC:', await web3.eth.getBalance(web3.utils.toChecksumAddress(accounts[0])));
        console.log('The amount of pool token of the account after sending 0.01 RBTC:', await poolToken.methods.balanceOf(accounts[0]).call());
    });

    it('verifies that users could remove liquidity(burn pool token) and then get RBTC', async () => {
        console.log('The account address:', accounts[0]);
        console.log('The amount of RBTC of the account:', await web3.eth.getBalance(web3.utils.toChecksumAddress(accounts[0])));
        console.log('The amount of pool token of the account:', await poolToken.methods.balanceOf(accounts[0]).call());
        await poolToken.methods.approve(RBTCWrapperProxy.address, (await web3.utils.toBN(9e15)).toString()).send({from:accounts[0]})
        console.log('The allowance that the RBTCWrapperProxy smart contract could spend:', await poolToken.methods.allowance(accounts[0], RBTCWrapperProxy.address).call());
        await rbtcWrapperProxy.removeLiquidity(web3.utils.toBN(1e15), 1, {from:accounts[0], to:RBTCWrapperProxy.address})
        console.log('The amount of RBTC of the account after burning 0.001 pool token:', await web3.eth.getBalance(web3.utils.toChecksumAddress(accounts[0])));
        console.log('The amount of pool token of the account after burning 0.001 pool token:', await poolToken.methods.balanceOf(accounts[0]).call());
    });
});